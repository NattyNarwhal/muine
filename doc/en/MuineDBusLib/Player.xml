<Type Name="Player" FullName="MuineDBusLib.Player">
  <TypeSignature Language="C#" Value="public class Player" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>muine-dbus</AssemblyName>
    <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 11 00 00 00 C5 37 4D 60 8D CC BC 44 7A D1 32 5C B6 3C 9B D1 6B 06 FB A7 3E A7 1A 10 D3 C9 F3 11 88 C7 7D D3 04 CA B0 96 51 5C 27 24 3C 5C 31 1D A5 06 36 19 95 BB 06 BB 44 FD 61 84 E0 5A 64 B4 83 3B A8 51 D3 19 7A DC F9 3E 16 C3 70 08 C9 6A 52 D3 34 66 7B B8 E0 D1 9F 27 71 7A E9 79 69 47 BE 41 4F B7 F6 BF 6F BE 3B E7 71 12 73 FC 8A 1D FD 7C 4B 24 7F C3 5E A6 EE 15 E4 1F A2 FB 99 9B 72 04 64 82]</AssemblyPublicKey>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Player control object</summary>
    <remarks>
      <para>This object is exported by Muine over D-Bus and allows for remote control of the application.</para>
      <example>
        <code lang="C#">
using System;
using System.IO;

using MuineDBusLib;

public class Example
{
	public static void Main (string [] args)
	{
		Player player = null;

		// Try to find a running Muine
		try {
			player = Player.FindInstance ();
		} catch {
			Environment.Exit (0);
		}

		Console.WriteLine (player.GetCurrentSong ());
	}
}
        </code>
      </example>
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DBus.InterfaceAttribute</AttributeName>
    </Attribute>
  </Attributes>
  <Members>
    <Member MemberName="FindInstance">
      <MemberSignature Language="C#" Value="public static MuineDBusLib.Player FindInstance ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>MuineDBusLib.Player</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tries to find a Player instance</summary>
        <returns>a <see cref="T:MuineDBusLib.Player" /></returns>
        <remarks>Returns a Player instance if found; throws an exception otherwise.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HookUp">
      <MemberSignature Language="C#" Value="public void HookUp (MuinePluginLib.IPlayer player);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="MuinePluginLib.IPlayer" />
      </Parameters>
      <Docs>
        <summary>Internal method</summary>
        <param name="player">a <see cref="T:MuinePluginLib.IPlayer" /></param>
        <remarks>This method is used by Muine internally. Do not use in client programs.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlaying">
      <MemberSignature Language="C#" Value="public virtual bool GetPlaying ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPlaying">
      <MemberSignature Language="C#" Value="public virtual void SetPlaying (bool playing);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="playing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="playing">a <see cref="T:System.Boolean" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNext">
      <MemberSignature Language="C#" Value="public virtual bool HasNext ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public virtual void Next ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrevious">
      <MemberSignature Language="C#" Value="public virtual bool HasPrevious ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="public virtual void Previous ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentSong">
      <MemberSignature Language="C#" Value="public virtual string GetCurrentSong ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:System.String" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWindowVisible">
      <MemberSignature Language="C#" Value="public virtual bool GetWindowVisible ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWindowVisible">
      <MemberSignature Language="C#" Value="public virtual void SetWindowVisible (bool visible);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="visible">a <see cref="T:System.Boolean" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVolume">
      <MemberSignature Language="C#" Value="public virtual int GetVolume ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:System.Int32" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVolume">
      <MemberSignature Language="C#" Value="public virtual void SetVolume (int volume);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="volume" Type="System.Int32" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="volume">a <see cref="T:System.Int32" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public virtual int GetPosition ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:System.Int32" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPosition">
      <MemberSignature Language="C#" Value="public virtual void SetPosition (int pos);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="pos">a <see cref="T:System.Int32" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHasToplevelFocus">
      <MemberSignature Language="C#" Value="public virtual bool GetHasToplevelFocus ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlayAlbum">
      <MemberSignature Language="C#" Value="public virtual void PlayAlbum ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaySong">
      <MemberSignature Language="C#" Value="public virtual void PlaySong ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenPlaylist">
      <MemberSignature Language="C#" Value="public virtual void OpenPlaylist (string uri);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="uri">a <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlayFile">
      <MemberSignature Language="C#" Value="public virtual void PlayFile (string uri);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="uri">a <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueFile">
      <MemberSignature Language="C#" Value="public virtual void QueueFile (string uri);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="uri">a <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAlbumCoverToFile">
      <MemberSignature Language="C#" Value="public virtual bool WriteAlbumCoverToFile (string file);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="file">a <see cref="T:System.String" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Quit">
      <MemberSignature Language="C#" Value="public virtual void Quit ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Player ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Constructs a Player object</summary>
        <returns>a <see cref="T:MuineDBusLib.Player" /></returns>
        <remarks>Creates an inactive, dummy Player object. You probably do not want to use this. To get an instance of the object, use <see cref="M:MuineDBusLib.Player.FindInstance" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SongChanged">
      <MemberSignature Language="C#" Value="public event MuineDBusLib.Player+SongChangedHandler SongChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>MuineDBusLib.Player+SongChangedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event MuineDBusLib.Player+StateChangedHandler StateChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>MuineDBusLib.Player+StateChangedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
